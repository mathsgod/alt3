<script src="{{composer_base}}/vendor/mathsgod/r-webauthn/dist/main.js"></script>

<div class="row" id="div1">
    <div class="col-md-3">

        <div class="card card-primary card-outline">
            <div class="card-body box-profile">
                <div class="text-center">
                    <img class="profile-user-img img-fluid img-circle" src="User/image" alt="User profile picture">
                </div>

                <h3 class="profile-username text-center">{{app.user.first_name}} {{app.user.last_name}}</h3>

                <p class="text-muted text-center">{{usergroup|join(',',' and ')}}</p>

                <button class="btn btn-primary btn-block"
                    @click="resetDialogVisible=true">{{'Reset passsword'|trans}}</button>
                <a class="btn btn-primary btn-block" href="User/2step_whitelist">2 step verfication ip white list</a>
                <button class="btn btn-primary btn-block" @click="createWebAuthn">Web Authentication</button>
            </div>
            <!-- /.card-body -->
        </div>

        <el-dialog title="Reset password" :visible.sync="resetDialogVisible">
            <el-form ref="form" :model="form" method="POST" label-width="auto">
                <el-form-item label="New password" prop="password" :rules="[
                    {required:true,trigger:'change'},
                    {min:6}
                ]">
                    <el-input v-model="form.password" name="password" show-password></el-input>
                </el-form-item>
                <el-form-item label="Retype password" prop="password2" :rules="[
                    {validator:validatePass2,trigger:'blue'}
                ]">
                    <el-input v-model="form.password2" show-password></el-input>
                </el-form-item>


            </el-form>

            <span slot="footer" class="dialog-footer">
                <el-button type="success" icon="fa fa-check" @click="onSubmit"> Submit</el-button>
            </span>
        </el-dialog>
    </div>

    <div class="col-md-9">
        <card primary outline :loading="loading">
            <card-body>
                <el-form label-width="auto" :model="userForm" ref="userForm">
                    <el-form-item label="First name" prop="first_name" :rules="[{required:true,trigger:'change'}]">
                        <el-input v-model="userForm.first_name"></el-input>
                    </el-form-item>
                    <el-form-item label="Last name" prop="last_name">
                        <el-input v-model="userForm.last_name"></el-input>
                    </el-form-item>
                    <el-form-item label="Phone" prop="phone">
                        <el-input v-model="userForm.phone"></el-input>
                    </el-form-item>
                    <el-form-item label="Email" prop="email" :rules="[{required:true,trigger:'change'}]">
                        <el-input v-model="userForm.email"></el-input>
                    </el-form-item>
                </el-form>
            </card-body>
            <card-footer>
                <el-button icon="fa fa-check" type="success" @click="onSubmitUserForm"> Submit</el-button>
            </card-footer>
        </card>

        <two-step-verification-card></two-step-verification-card>

        <card primary outline :loading="loading">
            <card-header title="User log"></card-header>
            <card-body>
                <el-table :data="me.UserLog" size="mini">
                    <el-table-column label="Login time" prop="login_time"></el-table-column>
                    <el-table-column label="Logout time" prop="logout_time"></el-table-column>
                    <el-table-column label="IP address" prop="ip"></el-table-column>
                    <el-table-column label="Result" prop="result"></el-table-column>
                </el-table>
            </card-body>
        </card>

        <card primary outline :loading="loading" size="mini">
            <card-header title="Event log"></card-header>
            <card-body>
                <el-table :data="me.EventLog">
                    <el-table-column label="ID" prop="eventlog_id"></el-table-column>
                    <el-table-column label="Class" prop="class"></el-table-column>
                    <el-table-column label="Action" prop="action"></el-table-column>
                    <el-table-column label="Created time" prop="created_time"></el-table-column>
                </el-table>
            </card-body>
        </card>

    </div>
</div>

<input type="hidden" id="system_base" value="/alt3" />
<script>
    Vue.component("two-step-verification-card", httpVueLoader(document.getElementById("system_base").value + "/components/two-step-verification-card.vue"));

    var vm = new Vue({
        el: "#div1",
        data: {
            resetDialogVisible: false,
            form: {},
            userForm: {},
            loading: true,
            me: {}
        },
        async created() {

            var resp = await this.$app.query({
                me: {
                    first_name: true,
                    last_name: true,
                    phone: true,
                    email: true,
                    UserLog: {
                        login_time: true,
                        logout_time: true,
                        ip: true,
                        result: true,
                    },
                    EventLog: {
                        eventlog_id: true,
                        class: true,
                        object_id: true,
                        action: true,
                        created_time: true
                    }
                }
            });
            this.me = resp.data.me;
            this.userForm = {
                first_name: resp.data.me.first_name,
                last_name: resp.data.me.last_name,
                phone: resp.data.me.phone,
                email: resp.data.me.email
            };

            this.loading = false;
        },
        methods: {
            async onSubmitUserForm() {
                await this.$refs.userForm.validate();
                await this.$app.updateMyInfo(this.userForm);
                await this.$message("User info updated");

            },
            validatePass2(rule, value, callback) {
                if (value === '') {
                    callback(new Error('Please input the password again'));
                } else if (value !== this.form.password) {
                    callback(new Error('Two inputs don\'t match!'));
                } else {
                    callback();
                }
            },
            async onSubmit() {
                try {
                    await this.$refs.form.validate();

                    var resp = await this.$gql.mutation("api", {
                        resetPassword: {
                            __args: {
                                new_password: this.form.password
                            }
                        }
                    });

                    resp = resp.data;
                    if (resp.data.resetPassword) {
                        this.form = {};
                        this.$message("password updated");
                        this.resetDialogVisible = false;
                    }
                } catch (e) {

                }
            },
            createWebAuthn() {
                this.$gql.query("api", {
                    me: {
                        credentialCreationOptions: true
                    }
                }).then(resp => {
                    var webn = new WebAuthn.WebAuthn();
                    webn.register(resp.data.data.me.credentialCreationOptions).then(resp => {
                        this.webAuthnRegister(resp);
                    }).catch(resp => {
                        alert(resp.message);
                    });
                });
            }, webAuthnRegister(info) {
                this.$gql.mutation("api", {
                    me: {
                        registrationWebAuthn: {
                            __args: {
                                attestion: JSON.stringify(info)
                            }
                        }
                    }
                }).then(resp => {
                    this.$gql.query("api", {
                        me: {
                            username: true
                        }
                    }).then(resp => {
                        localStorage.setItem("app.fido2", resp.data.data.me.username);
                        Swal.fire({
                            type: "success",
                            title: "Register completed"
                        });

                    });
                });
            }
        }
    });

</script>