<div class="row">
    <div class="col-md-3" id="div1">

        <div class="card card-primary card-outline">
            <div class="card-body box-profile">
                <div class="text-center">
                    <img class="profile-user-img img-fluid img-circle" src="User/image" alt="User profile picture">
                </div>

                <h3 class="profile-username text-center">{{app.user.first_name}} {{app.user.last_name}}</h3>

                <p class="text-muted text-center">{{usergroup|join(',',' and ')}}</p>

                <button class="btn btn-primary btn-block" @click="onResetPassword">{{'Reset passsword'|trans}}</button>
                <a class="btn btn-primary btn-block" href="User/2step">{{'2 step verfication'|trans}}</a>
                <a class="btn btn-primary btn-block" href="User/2step_whitelist">2 step verfication ip white list</a>
                <button class="btn btn-primary btn-block" @click="createWebAuthn">Web Authentication</button>
            </div>
            <!-- /.card-body -->
        </div>
    </div>

    <div class="col">
        {{user_update_box|raw}}
        {{userlog|raw}}
        {{eventlog|raw}}
    </div>
</div>

<template id="reset-password">
    <div>
        <form ref="form1">
            <div class="form-group">
                <label class="col-form-label">New password</label>
                <input class="form-control" type="password" id="p1" required v-model="password" />
            </div>
            <div class="form-group">
                <label class="col-form-label">Retype password</label>
                <input class="form-control" type="password" id="p2" required />
            </div>
        </form>

    </div>
</template>

<script>

    var resetPasswordDialog;
    document.addEventListener("DOMContentLoaded", () => {
        resetPasswordDialog = new VueDialog({
            el: document.getElementById("reset-password"),
            title: "Reset password",
            init() {
                $(this.$refs.form1).validate();

                $("#p2").rules("add", {
                    equalTo: "#p1"
                });
            },
            data() {
                return {
                    password: ""
                };
            }, buttons: {
                submit: {
                    label: "Submit",
                    className: "btn btn-success",
                    async callback(v) {
                        if (!$(this.$refs.form1).valid()) {
                            return false;
                        }

                        var resp = await this.$gql.mutation("api", {
                            resetPassword: {
                                __args: {
                                    new_password: this.password
                                }
                            }
                        });
                        resp = resp.data;
                        if (resp.error) {
                            Swal.fire({
                                type: 'error',
                                position: 'top-end',
                                toast: true,
                                showConfirmButton: false,
                                timer: 3000,
                                title: resp.error.message
                            });

                            return;
                        }
                        if (resp.data.resetPassword) {
                            Swal.fire({
                                type: "success",
                                title: "Password updated",
                                timer: 3000,
                                showConfirmButton: false
                            });
                        }

                    }
                }
            }
        });
    });



</script>


<script>
    var vm = new Vue({
        el: "#div1",
        methods: {
            onResetPassword() {
                resetPasswordDialog.open();
            },
            createWebAuthn() {
                this.$gql.query("api", {
                    me: {
                        credentialCreationOptions: true
                    }
                }).then(resp => {
                    var webn = new WebAuthn.WebAuthn();
                    webn.register(resp.data.data.me.credentialCreationOptions).then(resp => {
                        this.webAuthnRegister(resp);
                    }).catch(resp => {
                        alert(resp.message);
                    });
                });
            }, webAuthnRegister(info) {
                this.$gql.mutation("api", {
                    me: {
                        registrationWebAuthn: {
                            __args: {
                                attestion: JSON.stringify(info)
                            }
                        }
                    }
                }).then(resp => {
                    this.$gql.query("api", {
                        me: {
                            username: true
                        }
                    }).then(resp => {
                        localStorage.setItem("app.fido2", resp.data.data.me.username);
                        Swal.fire({
                            type: "success",
                            title: "Register completed"
                        });

                    });
                });
            }
        }
    });

</script>