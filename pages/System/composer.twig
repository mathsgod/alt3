{% verbatim %}
<div id="_div1">

	<card primary outline>
		<card-header>
			<div slot="title">
				Composer
				<button class="btn btn-xs btn-primary" @click="run('update mathsgod/alt3')">update mathsgod/alt3</button>
				<button class="btn btn-xs btn-primary" @click="changeOwner">Change owner</button>
				<button class="btn btn-xs btn-primary" @click="addRaymondRepo">Add Raymond repo</button>
				<button class="btn btn-xs btn-primary" @click="updateComposer">Update composer</button>

			</div>
		</card-header>
		<card-body>
			<input type="text" v-model="cmd" placeholder="update mathsgod/alt3" @keyup.enter="runComposer" class="form-control">
			<div v-html="composer_output" style="white-space:pre;overflow:auto">

			</div>
		</card-body>
	</card>

	<div class="row">
		<div class="col-md-9">
			<card primary outline ref="packageBox1">
				<card-header>
					<div slot="title">
						Installed packages
					</div>
				</card-header>
				<card-body class="table-responsive p-0">
					<table class="table table-sm table-hover" data-searching="true">
						<thead>
							<tr>
								<th>Name</th>
								<th>Description</th>
								<th>Version</th>
								<th>Update</th>
								<th>Remove</th>
							</tr>
						</thead>
						<tbody>
							<tr v-for="p in installed" v-if="p.version">
								<td v-text="p.name"></td>
								<td v-text="p.description"></td>
								<td v-text="p.version"></td>
								<td>
									<button @click="updatePackage(p.name)" class="btn btn-xs btn-primary">
										<i class="fa fa-fw fa-download"></i>
									</button>
								</td>
								<td>
									<button @click="removePackage(p.name)" class="btn btn-xs btn-danger">
										<i class="fa fa-fw fa-times"></i>
									</button>
								</td>
							</tr>
						</tbody>
					</table>
				</card-body>
			</card>
		</div>

		<div class="col">
			<card primary outline ref="packageBox2">
				<card-header>
					<div slot="title">
						New packages
					</div>
				</card-header>
				<card-body class="table-responsive p-0">
					<table class="table table-sm table-hover">
						<tr>
							<th>Name</th>
							<th></th>
						</tr>
						<tr v-for="p in suggests">
							<td v-text="p"></td>
							<td>
								<button class="btn btn-xs btn-success" @click="requirePackage(p)">
									<i class="fa fa-fw fa-download"></i>
								</button>
							</td>
						</tr>
					</table>
				</card-body>
			</card>

		</div>
	</div>

</div>

<script>

	var vm = new Vue({
		el: "#_div1",
		data: {
			cmd: "",
			composer_output: "",
			installed: [],
			suggests: []
		},
		mounted() {
			this.reloadPackages();
		}, methods: {
			updateComposer() {
				this.composer_output = "loading...";
				this.$http.post("System/composer/updateComposer").then(resp => {
					this.composer_output = "";
				});
			},
			addRaymondRepo() {
				this.composer_output = "loading...";
				this.$http.post("System/composer/addRaymondRepo").then(resp => {
					this.composer_output = "";
				});
			},
			changeOwner() {
				this.composer_output = "loading...";
				this.$http.post("System/composer/changeOwner").then(resp => {
					this.composer_output = "";
				});
			},
			reloadPackages() {
				this.$refs.packageBox1.showLoading();
				this.$refs.packageBox2.showLoading();
				this.$http.get("System/composer/info").then(resp => {
					this.installed = resp.data.installed;
					this.suggests = resp.data.suggests;
					this.$refs.packageBox1.hideLoading();
					this.$refs.packageBox2.hideLoading();
				});
			},
			removePackage(package) {
				this.composer_output = "loading...";
				this.$http.post("System/composer/run", {
					cmd: "remove " + package
				}).then(resp => {
					this.cmd = "";
					this.composer_output = resp.body.output;
					this.reloadPackages();
				});
			}, updatePackage(package) {
				this.composer_output = "loading...";
				this.$http.post("System/composer/run", {
					cmd: "update " + package
				}).then(resp => {
					this.cmd = "";
					this.composer_output = resp.body.output;
					this.reloadPackages();
				});

			}, requirePackage(package) {
				this.composer_output = "loading...";
				this.$http.post("System/composer/run", {
					cmd: "require " + package
				}).then(resp => {
					this.cmd = "";
					this.composer_output = resp.body.output;
					this.reloadPackages();
				});
			},
			run(cmd) {
				this.composer_output = "loading...";
				this.$http.post("System/composer/run", {
					cmd: cmd
				}).then(resp => {
					this.cmd = "";
					this.composer_output = resp.body.output;
				});
			},
			runComposer() {
				this.composer_output = "loading...";
				this.$http.post("System/composer/run", {
					cmd: this.cmd
				}).then(resp => {
					this.cmd = "";
					this.composer_output = resp.body.output;
				});
			}
		}
	});
</script>
{% endverbatim %}